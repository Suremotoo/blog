<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://suremotoo.site/blog/</id>
    <title>Suremotoo&apos;s Blog</title>
    <updated>2019-05-16T14:50:32.204Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://suremotoo.site/blog/"/>
    <link rel="self" href="https://suremotoo.site/blog//atom.xml"/>
    <subtitle>每天叫醒你的不是闹铃，而是梦想</subtitle>
    <logo>https://suremotoo.site/blog//images/avatar.png</logo>
    <icon>https://suremotoo.site/blog//favicon.ico</icon>
    <rights>All rights reserved 2019, Suremotoo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Hello]]></title>
        <id>https://suremotoo.site/blog//post/hello-suremotoo</id>
        <link href="https://suremotoo.site/blog//post/hello-suremotoo">
        </link>
        <updated>2019-05-16T14:50:27.000Z</updated>
        <summary type="html"><![CDATA[<p>Hello</p>
]]></summary>
        <content type="html"><![CDATA[<p>Hello</p>
<!-- more --> 
<p>Suremotoo</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="http://oht4nlntk.bkt.clouddn.com/Music_iP%E8%B5%B5%E9%9C%B2%20-%20%E7%A6%BB%E6%AD%8C%20%28Live%29.mp3">
      </audio>
<video id="video" preload="none" poster="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-Gridea-preface.png?raw=true">
    <source id="mp4" src="http://upos-hz-mirrorakam.akamaized.net/upgcxcode/92/88/92028892/92028892-1-208.mp4?e=ig8euxZM2rNcNbeVhwdVtWeVhwdVNEVEuCIv29hEn0lqXg8gNEVEuCuEtoNY-g859r1qXg8xNEVE5XREto89kXHeqa5zN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&ua=tvproj&deadline=1557989314&dynamic=1&gen=playurl&oi=1732814277&os=akam&platform=tvproj&rate=90000&trid=7abab2c96bad41afbe73dc84f172cf25&uipk=5&uipv=5&um_deadline=1557989314&um_sign=8f6a26495cf27c4daa3916d3b23b0a40&upsig=8c866e70129e22770699c0b3c5b83492&uparams=e,ua,deadline,dynamic,gen,oi,os,platform,rate,trid,uipk,uipv,um_deadline,um_sign&hdnts=exp=1557989314~hmac=20b1eb3dea87543ff49d6b7b96080a1bad6b739afbfd84a8142bae3d20051fa5" type="video/mp4">
    <p>Your user agent does not support the HTML5 Video element.</p>
</video>
<video id="video" preload="none" poster="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-Gridea-profile.png?raw=true">
    <source id="mp4" src="https://dev.tencent.com/u/Suremotoo/p/blog-resources/git/raw/0a52ad5701cdebd5b9f50a844496d717c2578386/gridea-guide/2-git-%E5%AE%89%E8%A3%85.mp4" type="video/mp4">
    <p>Your user agent does not support the HTML5 Video element.</p>
</video>
<p><a href="http://upos-hz-mirrorakam.akamaized.net/upgcxcode/92/88/92028892/92028892-1-208.mp4?e=ig8euxZM2rNcNbeVhwdVtWeVhwdVNEVEuCIv29hEn0lqXg8gNEVEuCuEtoNY-g859r1qXg8xNEVE5XREto89kXHeqa5zN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&ua=tvproj&deadline=1557989314&dynamic=1&gen=playurl&oi=1732814277&os=akam&platform=tvproj&rate=90000&trid=7abab2c96bad41afbe73dc84f172cf25&uipk=5&uipv=5&um_deadline=1557989314&um_sign=8f6a26495cf27c4daa3916d3b23b0a40&upsig=8c866e70129e22770699c0b3c5b83492&uparams=e,ua,deadline,dynamic,gen,oi,os,platform,rate,trid,uipk,uipv,um_deadline,um_sign&hdnts=exp=1557989314~hmac=20b1eb3dea87543ff49d6b7b96080a1bad6b739afbfd84a8142bae3d20051fa5" target="_blank"><img  title="点击查看视频" src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-Gridea-preface.png?raw=true"></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 快速上手教程]]></title>
        <id>https://suremotoo.site/blog//post/gridea-quick-start-guide</id>
        <link href="https://suremotoo.site/blog//post/gridea-quick-start-guide">
        </link>
        <updated>2019-05-16T14:40:59.000Z</updated>
        <summary type="html"><![CDATA[<p>如果您之前使用过 <strong>Github</strong> 来搭建过自己的网站或者博客，那么您可以很轻松的上手 <strong>Gridea</strong>。</p>
<p>如果您使用过 <strong>Hugo、Hexo、Jekyll</strong> 等类似于这样的静态网站生成工具，您会体验到 <strong>Gridea</strong> 是多么的人性化～</p>
<p>如果您并非开发者或者说是小小白，根据下面的操作，您照样可以轻松搭建您的网站或者博客！</p>
]]></summary>
        <content type="html"><![CDATA[<p>如果您之前使用过 <strong>Github</strong> 来搭建过自己的网站或者博客，那么您可以很轻松的上手 <strong>Gridea</strong>。</p>
<p>如果您使用过 <strong>Hugo、Hexo、Jekyll</strong> 等类似于这样的静态网站生成工具，您会体验到 <strong>Gridea</strong> 是多么的人性化～</p>
<p>如果您并非开发者或者说是小小白，根据下面的操作，您照样可以轻松搭建您的网站或者博客！</p>
<!-- more -->
<h2 id="一-预备工作">一、预备工作</h2>
<blockquote>
<p>文章中使用 <strong>Github</strong> 作为样例，<strong>Coding</strong> 的配置方式大同小异。</p>
</blockquote>
<p><span style="color: red;">⚠️⚠️注意：</span> 要在本机安装好 <a href="https://gridea.dev/" target="_blank"><b>Gridea</b></a> 和 <a href="https://git-scm.com/" target="_blank" ><b>Git</b></a>，<a href="https://suremotoo.site/blog/git-install" target="_blank" ><b>点此Git 查看安装教程</b></a></p>
<h2 id="二-注册-github-账号并创建仓库">二、注册 Github 账号并创建仓库</h2>
<blockquote>
<p>已经注册并成功建好仓库略过此步骤</p>
</blockquote>
<p>打开 Github 的官方网站： <a href="[https://github.com](https://github.com/)" target="_blank"><a href="https://github.com/">https://github.com</a></a>，如果你没有用过github，默认打开的页面就是注册页面，如下：</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-sign-up-github.png?raw=true" alt="Sign up for Github"></p>
<p>注册自己的github账号，注册成功后，我们新建个仓库，<strong>用来存储网站的代码</strong>。点击图中的 <button type="button" style="background-color: #28a745; background-image: linear-gradient(-180deg,#34d058,#28a745 90%); color: #fff;">New</button>  按钮</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-new-repo-1.png?raw=true" alt="New repo for Github"></p>
<p>然后跳转到新建仓库详情页，填写仓库的基本信息。</p>
<blockquote>
<p><span style="color: red;">注意：</span> 小白最好按照图中的操作说明来，避免不必要的问题</p>
</blockquote>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-new-repo-2.png?raw=true" alt="New repo for Github"></p>
<p>我的github仓库名叫：Suremotoo， 所以我的仓库名就起： Suremotoo.github.io</p>
<h2 id="a-namepersonal-access-token-stylecolor-333text-decoration-none三-申请-personal-access-token️️token值要保存好a"><a name="personal-access-token" style="color: #333;text-decoration: none;">三、申请 Personal access token（⚠️⚠️Token值要保存好）</a></h2>
<p>接下来我们要申请 Personal access token，这样 Gridea 才能有权限将网站文件推送到你的仓库中。
<em>我不直接给出申请token的链接，为了大家以后忘了自己还能找到该功能。</em>
我们按照下图标的顺序，点击 <strong>「右上角自己的头像右边的小箭头」→ 「Settings」→ 「Developer settings」</strong>
<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-set-token-1.png?raw=true" alt="Developer settings"></p>
<p>再依次选择 <strong>「Developer settings」→ 「Personal access tokens」→ 「Generate new token」</strong></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-set-token-2.png?raw=true" alt="Personal access tokens"></p>
<p>我们起个名字（或者说是备注），说明这个 token是用来干什么的。<strong>token 的权限我们只选择 Repo。</strong></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-set-token-3.png?raw=true" alt="Personal access tokens"></p>
<p>申请成功，会给你一串数字+字母的信息，这个就是 Token，我们一定要保存好！后面的配置中我们会用到。</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-set-token-4.png?raw=true" alt="Personal access tokens"></p>
<h2 id="四-配置-gridea-与-github">四、配置 Gridea 与 Github</h2>
<blockquote>
<p>这里以我的为例，我的 Github 用户名叫： Suremotoo</p>
</blockquote>
<p>配置 Gridea，来连接 Github 。可以参考下面的方法进行配置：</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-settings-1.png?raw=true" alt="Gridea Settings"></p>
<ul>
<li>域名：Github Pages 对应的域名（例如：<em><strong>https://Suremotoo.github.io 或 https://suremotoo.site</strong></em>）</li>
<li>仓库：你的静态文件存放的仓库（例如：<em><strong>Suremotoo.github.io</strong></em> ）</li>
<li>分支：你的 Github Pages 对应的分支（例如：<em><strong>master 或 gh-pages</strong></em>）</li>
<li>用户名：仓库所属用户的用户名（通常就是你的 Github 账号的昵称，例如：<em><strong>Suremotoo</strong></em>）</li>
<li>邮箱：Git 推送时使用的邮箱（通常就是你的 Github 账号的邮箱，例如：<em><strong>suremotoo@163.com</strong></em>）</li>
<li>Token: Git 推送时需要的 Token，用来向 Github 提交构建后的文件<span style="color: red;"> <em><strong>这里的token就是 <a href="#personal-access-token" style="color: #333;text-decoration: none;"> 第三步 </a>申请的 Github personal access tokens</strong></em> </span></li>
<li>CNAME: 可通过这个【可选项】配置你自己的域名（例如：<em><strong>suremotoo.site</strong></em>）</li>
</ul>
<p>填写上面的信息后，点击 <strong>「检测远程连接」</strong> 按钮，如果提示 <strong>「远程连接成功」</strong>  那就ok啦～</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-settings-2.png?raw=true" alt="Gridea connectting"></p>
<h2 id="五-使用-gitalk-为网站添加评论">五、使用 Gitalk 为网站添加评论</h2>
<blockquote>
<p>找不到 <strong>「Developer settings」</strong> 的位置可以参考 <a href="#personal-access-token" style="color: #333;text-decoration: none;"> <strong>第三步</strong> </a></p>
</blockquote>
<p>我们在进入个人 <strong>「Settings」</strong> 里，再 依次选择 <strong>「Developer settings」→ 「OAuth Apps」→ 「New OAuth App」</strong>  创建一个应用。</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-gitalk-1.png?raw=true" alt="New OAuth App"></p>
<p>紧接着按照下图说明，填写注册应用信息</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-gitalk-2.png?raw=true" alt="Register a new OAuth application"></p>
<p>填写完成之后，会有有个 <strong>ClientID</strong> 和 <strong>ClientSecret</strong> ， 我们保存下这两条信息，来配置Gridea</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-gitalk-3.png?raw=true" alt="Register a new OAuth application"></p>
<p>打开 Gridea，依次进入 <strong>「配置」→ 「评论配置」</strong>，按照下图说明填写信息：</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/gridea-guide/guide-gridea-github-gitalk-4.png?raw=true" alt="Gitalk Config"></p>
<p>这样评论插件就设置好了，在预览时会在文章页显示评论模块，但不会显示具体的评论信息，因为这个是本地预览，而 Github OAuth 设置的域名为线上的域名。待博客同步到线上时就可以显示啦！</p>
<p><span style="color: red;">注意：博客同步后，每一篇需要你手动去激活评论，也就是在评论的地方需要你使用Github先登陆一下，这样就完成了初始化，别人才能评论哟～</span></p>
<p>本文由 <a href="https://github.com/Suremotoo" target="_blank"><b>@Suremotoo</b></a> 综合整理。</p>
<ul>
<li>素材链接：
<ul>
<li><em><a href="https://fehey.com/post/hve-notes-start/" target="_blank">原文小白教程</a></em></li>
<li><em><a href="https://sspai.com/post/54212?from=telegram" target="_blank">Gridea 让你更方便的管理 Github 𝖯𝖺𝗀𝖾𝗌</a></em></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git安装教程]]></title>
        <id>https://suremotoo.site/blog//post/git-install</id>
        <link href="https://suremotoo.site/blog//post/git-install">
        </link>
        <updated>2019-05-16T14:40:52.000Z</updated>
        <summary type="html"><![CDATA[<p><em>Git 可是当今最流行的版本控制软件！</em></p>
<h4 id="第一步下载git">第一步，下载Git</h4>
<p>https://git-scm.com/download/win</p>
]]></summary>
        <content type="html"><![CDATA[<p><em>Git 可是当今最流行的版本控制软件！</em></p>
<h4 id="第一步下载git">第一步，下载Git</h4>
<p>https://git-scm.com/download/win</p>
<!-- more --> 
<h4 id="第二步具体安装">第二步，具体安装</h4>
<h5 id="1-下载好安装包后打开先选择需要安装的组件如果不懂就全部安装吧">1. 下载好安装包后，打开先选择需要安装的组件（如果不懂就全部安装吧 <strong>:)</strong>  ）</h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-1.png?raw=true" alt="git-install-win-1"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3486900"><label class="task-list-item-label" for="task-item-3486900"> Additional icons  附加图标</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3193896"><label class="task-list-item-label" for="task-item-3193896"> On the Desktop 添加图标到桌面上</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1356421"><label class="task-list-item-label" for="task-item-1356421"> Windows Explorer integration Windows 资源管理器集成鼠标右键菜单</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6007962"><label class="task-list-item-label" for="task-item-6007962"> Git Bash Here</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7003695"><label class="task-list-item-label" for="task-item-7003695"> Git GUI Here</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9754604"><label class="task-list-item-label" for="task-item-9754604"> Git LFS (Large File Support) 大文件支持</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5386889"> Associate .git* configuration files with the default text editor
<label class="task-list-item-label" for="task-item-5386889"> Associate .git* configuration files with the default text editor 
将 .git 配置文件与默认文本编辑器相关联</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3650518"> Associate .sh files to be run with Bash
<label class="task-list-item-label" for="task-item-3650518"> Associate .sh files to be run with Bash
将.sh文件关联到Bash运行</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2484667"> Use a TrueType font in all console windows
<label class="task-list-item-label" for="task-item-2484667"> Use a TrueType font in all console windows
在所有控制台窗口中使用TrueType字体</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3085221"> Check daily for Git for Windows updates
<label class="task-list-item-label" for="task-item-3085221"> Check daily for Git for Windows updates
每天检查Git是否有Windows更新</label></p>
</li>
</ul>
<h5 id="2-选择git的编辑器通常选择-vim">2. 选择git的编辑器，通常选择 vim</h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-2.png?raw=true" alt="git-install-win-2"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4478468"> Use the Nano editor by default
<label class="task-list-item-label" for="task-item-4478468"> Use the Nano editor by default
默认使用 Nano 编辑器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2711741"> Use Vim (The ubiquitous text editor) as Git's default editor
<label class="task-list-item-label" for="task-item-2711741"> Use Vim (The ubiquitous text editor) as Git's default editor
使用 Vim 作为 Git 的默认编辑器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7193020"> Use Notepad++ as Git's default editor
<label class="task-list-item-label" for="task-item-7193020"> Use Notepad++ as Git's default editor
使用 Notepad++ 作为 Git 的默认编辑器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1713326"> Use Visual Studio Code as Git's default editor
<label class="task-list-item-label" for="task-item-1713326"> Use Visual Studio Code as Git's default editor
使用 Visual Studio Code 作为 Git 的默认编辑器</label></p>
</li>
</ul>
<h5 id="3-配置环境变量-span-stylecolor-red很重要span">3. 配置环境变量-<span style="color: red;"><em><strong>很重要</strong></em></span></h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-3-environment.png?raw=true" alt="git-install-win-3"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8573378"> Use Git from Git Bash only
<label class="task-list-item-label" for="task-item-8573378"> Use Git from Git Bash only
这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4632342"> Use Git from the Windows Command Prompt
<label class="task-list-item-label" for="task-item-4632342"> Use Git from the Windows Command Prompt
这个选项被认为是安全的，因为它只向PATH添加一些最小的 Git包，以避免使用可选的Unix工具混淆环境。 您将能够从 Git Bash 和 Windows 命令提示符中使用 Git。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9766597"> Use Git and optional Unix tools from the Windows Command Prompt
<label class="task-list-item-label" for="task-item-9766597"> Use Git and optional Unix tools from the Windows Command Prompt
Git和可选的Unix工具都将添加到您计算机的 PATH 中</label></p>
</li>
</ul>
<p>警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。</p>
<h5 id="4-传输设置-默认即可">4. 传输设置-默认即可</h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-4.png?raw=true" alt="git-install-win-4"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6949289"> Use the OpenSSL library   使用 OpenSSL 库
<label class="task-list-item-label" for="task-item-6949289"> Use the OpenSSL library   使用 OpenSSL 库
服务器证书将使用ca-bundle.crt文件进行验证。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9130338"> Use the native Windows Secure Channel library   使用本地 Windows 安全通道库
<label class="task-list-item-label" for="task-item-9130338"> Use the native Windows Secure Channel library   使用本地 Windows 安全通道库
服务器证书将使用Windows证书存储验证。此选项还允许您使用公司的内部根CA证书，例如， 通过Active Directory Domain Services</label></p>
</li>
</ul>
<h5 id="5-配置行结束标记-默认即可">5. 配置行结束标记-默认即可</h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-5.png?raw=true" alt="git-install-win-5"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-398864"> Checkout Windows-style,commit Unix-style line endings  安装windows方式检出，使用linux方式提交
<label class="task-list-item-label" for="task-item-398864"> Checkout Windows-style,commit Unix-style line endings  安装windows方式检出，使用linux方式提交
在检出文本文件时，Git会将LF转换为CRLF。当提交文本文件时，CRLF将转换为LF。 对于跨平台项目，这是Windows上推荐的设置（“core.autocrlf”设置为“true”）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7039843"> Checkout as-is , commit Unix-style line endings    按原样检出，linux方式提交
<label class="task-list-item-label" for="task-item-7039843"> Checkout as-is , commit Unix-style line endings    按原样检出，linux方式提交
在检出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。 对于跨平台项目，这是Unix上的推荐设置 （“core.autocrlf”设置为“input”）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4385669"> Checkout as-is,commit as-is   按原样检出，原样提交
<label class="task-list-item-label" for="task-item-4385669"> Checkout as-is,commit as-is   按原样检出，原样提交
在检出或提交文本文件时，Git不会执行任何转换。对于跨平台项目，不推荐使用此选项（“core.autocrlf”设置为“false”）</label></p>
</li>
</ul>
<h5 id="6配置终端模拟器默认即可">6.配置终端模拟器，默认即可</h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-6.png?raw=true" alt="git-install-win-6"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2040287"> Use MinTTY (the default terminal of MSYS2)  推荐使用
<label class="task-list-item-label" for="task-item-2040287"> Use MinTTY (the default terminal of MSYS2)  推荐使用
Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选区和Unicode字体。 Windows控制台程序（如交互式Python）必须通过'winpty'启动才能在MinTTY中运行。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6494708"> Use Windows' default console window     默认使用windows自己
<label class="task-list-item-label" for="task-item-6494708"> Use Windows' default console window     默认使用windows自己
Git将使用Windows的默认控制台窗口（“cmd.exe”），该窗口可以与Win32控制台程序（如交互式Python或node.js）一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。</label></p>
</li>
</ul>
<h5 id="7其他配置默认即可">7.其他配置，默认即可</h5>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/git-img/git-install-win-7.png?raw=true" alt="git-install-win-7"></p>
<hr>
<p><em><strong>附译文：</strong></em></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5233220"> Enable file system caching   启用文件系统缓存
<label class="task-list-item-label" for="task-item-5233220"> Enable file system caching   启用文件系统缓存
文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）。 这提供了显着的性能提升。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5227567"> Enable Git Credential Manager   启用Git凭证管理器
<label class="task-list-item-label" for="task-item-5227567"> Enable Git Credential Manager   启用Git凭证管理器
Windows的Git凭证管理器为Windows提供安全的Git凭证存储，最显着的是对Visual Studio Team Services和GitHub的多因素身份验证支持。 （需要.NET Framework v4.5.1或更高版本）。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7480259"> Enable symbolic links   启用符号链接
<label class="task-list-item-label" for="task-item-7480259"> Enable symbolic links   启用符号链接
启用符号链接（需要SeCreateSymbolicLink权限）。请注意，现有存储库不受此设置的影响。</label></p>
</li>
</ul>
<h3 id="mac电脑安装-git">Mac电脑安装 Git</h3>
<p>第①个方式： 去<a href="https://git-scm.com" target="_blank"><strong>官网</strong></a>下载安装包直接安装就行</p>
<p>第②个方式：  使用 <a href="https://brew.sh/" target="_blank"><strong>Homebrew</strong></a> 安装</p>
<ul>
<li>在Mac电脑的终端中执行 <code>/usr/bin/ruby -e &quot;$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>
<li>再执行 <code>brew install git</code> 即可完成安装</li>
</ul>
<p>本文由 <a href="https://github.com/Suremotoo" target="_blank"><b>@Suremotoo</b></a> 综合整理，原素材地址忘了~  😅😅</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Excel 保护表密码忘了怎么办？]]></title>
        <id>https://suremotoo.site/blog//post/excel-password-crack</id>
        <link href="https://suremotoo.site/blog//post/excel-password-crack">
        </link>
        <updated>2019-05-08T13:55:54.000Z</updated>
        <summary type="html"><![CDATA[<p>在工作中，大家可能使用Excel的保护表功能，对 Excel 文件进行加密，有些是数据模板，防止误改加了密，也有可能是时间久了，就把密码给忘了。当然，这也不是不能解决的，现在给出破解密码的方法！😋😋</p>
]]></summary>
        <content type="html"><![CDATA[<p>在工作中，大家可能使用Excel的保护表功能，对 Excel 文件进行加密，有些是数据模板，防止误改加了密，也有可能是时间久了，就把密码给忘了。当然，这也不是不能解决的，现在给出破解密码的方法！😋😋</p>
 <!-- more --> 
<p>1、用 Microsoft Excel 打开需要破解保护密码的 Excel 文件
2、依次点击 <strong>菜单栏上的「工具」—「宏」— 「录制新宏」</strong>，输入宏名字，如：crack 点击 <strong>确定</strong>。</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-1.png?raw=true" alt="excel-cracker-1"></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-2.png?raw=true" alt="excel-cracker-2"></p>
<p>3、再依次点击 <strong>菜单栏上的「工具」—「宏」— 「停止录制」</strong>(这样就得到一个空的宏)；</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-3.png?raw=true" alt="excel-cracker-3"></p>
<p>4、依次点击菜<strong>菜单栏上的「工具」—「宏」— 「宏」</strong>,选 crack,点<strong>编辑</strong>按钮；</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-4.png?raw=true" alt="excel-cracker-4"></p>
<p>5、删除窗口中的所有代码，替换为下面的代码内容</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-5-code.png?raw=true" alt="excel-cracker-5"></p>
<pre><code class="language-vb">Option Explicit

Public Sub AllInternalPasswords()
' Breaks worksheet and workbook structure passwords. Bob McCormick
' probably originator of base code algorithm modified for coverage
' of workbook structure / windows passwords and for multiple passwords
'
' Norman Harker and JE McGimpsey 27-Dec-2002 (Version 1.1)
' Modified 2003-Apr-04 by JEM: All msgs to constants, and
' eliminate one Exit Sub (Version 1.1.1)
' Reveals hashed passwords NOT original passwords
Const DBLSPACE As String = vbNewLine &amp; vbNewLine
Const AUTHORS As String = DBLSPACE &amp; vbNewLine &amp; _
&quot;Adapted from Bob McCormick base code by&quot; &amp; _
&quot;Norman Harker and JE McGimpsey&quot;
Const HEADER As String = &quot;AllInternalPasswords User Message&quot;
Const VERSION As String = DBLSPACE &amp; &quot;Version 1.1.1 2003-Apr-04&quot;
Const REPBACK As String = DBLSPACE &amp; &quot;Please report failure &quot; &amp; _
&quot;to the microsoft.public.excel.programming newsgroup.&quot;
Const ALLCLEAR As String = DBLSPACE &amp; &quot;The workbook should &quot; &amp; _
&quot;now be free of all password protection, so make sure you:&quot; &amp; _
DBLSPACE &amp; &quot;SAVE IT NOW!&quot; &amp; DBLSPACE &amp; &quot;and also&quot; &amp; _
DBLSPACE &amp; &quot;BACKUP!, BACKUP!!, BACKUP!!!&quot; &amp; _
DBLSPACE &amp; &quot;Also, remember that the password was &quot; &amp; _
&quot;put there for a reason. Don't stuff up crucial formulas &quot; &amp; _
&quot;or data.&quot; &amp; DBLSPACE &amp; &quot;Access and use of some data &quot; &amp; _
&quot;may be an offense. If in doubt, don't.&quot;
Const MSGNOPWORDS1 As String = &quot;There were no passwords on &quot; &amp; _
&quot;sheets, or workbook structure or windows.&quot; &amp; AUTHORS &amp; VERSION
Const MSGNOPWORDS2 As String = &quot;There was no protection to &quot; &amp; _
&quot;workbook structure or windows.&quot; &amp; DBLSPACE &amp; _
&quot;Proceeding to unprotect sheets.&quot; &amp; AUTHORS &amp; VERSION
Const MSGTAKETIME As String = &quot;After pressing OK button this &quot; &amp; _
&quot;will take some time.&quot; &amp; DBLSPACE &amp; &quot;Amount of time &quot; &amp; _
&quot;depends on how many different passwords, the &quot; &amp; _
&quot;passwords, and your computer's specification.&quot; &amp; DBLSPACE &amp; _
&quot;Just be patient! Make me a coffee!&quot; &amp; AUTHORS &amp; VERSION
Const MSGPWORDFOUND1 As String = &quot;You had a Worksheet &quot; &amp; _
&quot;Structure or Windows Password set.&quot; &amp; DBLSPACE &amp; _
&quot;The password found was: &quot; &amp; DBLSPACE &amp; &quot;$$&quot; &amp; DBLSPACE &amp; _
&quot;Note it down for potential future use in other workbooks by &quot; &amp; _
&quot;the same person who set this password.&quot; &amp; DBLSPACE &amp; _
&quot;Now to check and clear other passwords.&quot; &amp; AUTHORS &amp; VERSION
Const MSGPWORDFOUND2 As String = &quot;You had a Worksheet &quot; &amp; _
&quot;password set.&quot; &amp; DBLSPACE &amp; &quot;The password found was: &quot; &amp; _
DBLSPACE &amp; &quot;$$&quot; &amp; DBLSPACE &amp; &quot;Note it down for potential &quot; &amp; _
&quot;future use in other workbooks by same person who &quot; &amp; _
&quot;set this password.&quot; &amp; DBLSPACE &amp; &quot;Now to check and clear &quot; &amp; _
&quot;other passwords.&quot; &amp; AUTHORS &amp; VERSION
Const MSGONLYONE As String = &quot;Only structure / windows &quot; &amp; _
&quot;protected with the password that was just found.&quot; &amp; _
ALLCLEAR &amp; AUTHORS &amp; VERSION &amp; REPBACK
Dim w1 As Worksheet, w2 As Worksheet
Dim i As Integer, j As Integer, k As Integer, l As Integer
Dim m As Integer, n As Integer, i1 As Integer, i2 As Integer
Dim i3 As Integer, i4 As Integer, i5 As Integer, i6 As Integer
Dim PWord1 As String
Dim ShTag As Boolean, WinTag As Boolean

Application.ScreenUpdating = False
With ActiveWorkbook
WinTag = .ProtectStructure Or .ProtectWindows
End With
ShTag = False
For Each w1 In Worksheets
ShTag = ShTag Or w1.ProtectContents
Next w1
If Not ShTag And Not WinTag Then
MsgBox MSGNOPWORDS1, vbInformation, HEADER
Exit Sub
End If
MsgBox MSGTAKETIME, vbInformation, HEADER
If Not WinTag Then
MsgBox MSGNOPWORDS2, vbInformation, HEADER
Else
On Error Resume Next
Do 'dummy do loop
For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
With ActiveWorkbook
.Unprotect Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; _
Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; _
Chr(i3) &amp; Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n)
If .ProtectStructure = False And _
.ProtectWindows = False Then
PWord1 = Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; Chr(l) &amp; _
Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; _
Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n)
MsgBox Application.Substitute(MSGPWORDFOUND1, _
&quot;$$&quot;, PWord1), vbInformation, HEADER
Exit Do 'Bypass all for...nexts
End If
End With
Next: Next: Next: Next: Next: Next
Next: Next: Next: Next: Next: Next
Loop Until True
On Error GoTo 0
End If
If WinTag And Not ShTag Then
MsgBox MSGONLYONE, vbInformation, HEADER
Exit Sub
End If
On Error Resume Next
For Each w1 In Worksheets
'Attempt clearance with PWord1
w1.Unprotect PWord1
Next w1
On Error GoTo 0
ShTag = False
For Each w1 In Worksheets
'Checks for all clear ShTag triggered to 1 if not.
ShTag = ShTag Or w1.ProtectContents
Next w1
If ShTag Then
For Each w1 In Worksheets
With w1
If .ProtectContents Then
On Error Resume Next
Do 'Dummy do loop
For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
.Unprotect Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; _
Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; _
Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n)
If Not .ProtectContents Then
PWord1 = Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; Chr(l) &amp; _
Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; _
Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n)
MsgBox Application.Substitute(MSGPWORDFOUND2, _
&quot;$$&quot;, PWord1), vbInformation, HEADER
'leverage finding Pword by trying on other sheets
For Each w2 In Worksheets
w2.Unprotect PWord1
Next w2
Exit Do 'Bypass all for...nexts
End If
Next: Next: Next: Next: Next: Next
Next: Next: Next: Next: Next: Next
Loop Until True
On Error GoTo 0
End If
End With
Next w1
End If
MsgBox ALLCLEAR &amp; AUTHORS &amp; VERSION &amp; REPBACK, vbInformation, HEADER
End Sub

</code></pre>
<p>6、粘贴上面的代码后，<strong>直接关闭编辑窗口</strong>
7、依次点击<strong>菜单栏上的「工具」—「宏」— 「宏」</strong>,选 AllInternalPasswords, <strong>运行</strong></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-6.png?raw=true" alt="excel-cracker-6"></p>
<p>8、运行会依次弹出4个窗口，第3张图就是带密码的，分别如下：</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-tips1.png?raw=true" alt="excel-cracker-tips1"></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-tips2.png?raw=true" alt="excel-cracker-tips2"></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-tips3.png?raw=true" alt="excel-cracker-tips3"></p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/excel-crack/excel-cracker-tips4.png?raw=true" alt="excel-cracker-tips4"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[禁用 Chrome 的黑色模式/Dark Mode]]></title>
        <id>https://suremotoo.site/blog//post/disable-chrome-dark-mode</id>
        <link href="https://suremotoo.site/blog//post/disable-chrome-dark-mode">
        </link>
        <updated>2019-05-04T01:20:48.000Z</updated>
        <summary type="html"><![CDATA[<p>macOS Mojave 中引入了系统层面的黑色模式，Chrome 73 在应用中支行了这一模式，即系统设置为黑色模式时，Chrome 会自动适应切换到 Dark Mode。</p>
]]></summary>
        <content type="html"><![CDATA[<p>macOS Mojave 中引入了系统层面的黑色模式，Chrome 73 在应用中支行了这一模式，即系统设置为黑色模式时，Chrome 会自动适应切换到 Dark Mode。</p>
<!-- more -->
<p><em><strong>Chrome 跟随系统设置的黑色模式</strong></em>
<img src="https://i.loli.net/2019/05/04/5cccf17a277d9.png" alt="chrome-system-dark.png" title="chrome-system-dark.png" />
不得不说，深色模式总是很受欢迎～</p>
<p>但其实黑色模式下标题与顶部系统菜单融为一体，且黑色模式下 Chrome 标签上内容辨识度也不高了，看起来还是有点别扭。更重要的是，主题没选好，可能就会导致如下图的情况咯（上面是chrome开启深色模式，下面是关闭深色模式。）
<em><strong>Chrome 黑色模式下与普通模式的对比</strong></em>
<img src="https://i.loli.net/2019/05/04/5cccf179badba.png" alt="chrome-diff.png" title="chrome-diff.png" />
很明显，不开深色模式更舒服（可能chrome的主题有关系，大家自己去尝试）～
所以决定系统使用 Dark Mode 的情况下将 Chrome 的黑色禁用。</p>
<p>通过命令行中设置 <strong>defaults</strong> 值可达到目的。</p>
<pre><code class="language-shell">$ defaults write com.google.Chrome NSRequiresAquaSystemAppearance -bool Yes
</code></pre>
<p>如果想恢复默认，只需要将刚才设置的值删掉或者将 Yes 设置成 No。</p>
<pre><code class="language-shell">$ defaults delete com.google.Chrome NSRequiresAquaSystemAppearance
</code></pre>
<h3 id="禁用任意-app-的-dark-mode">禁用任意 App 的 Dark Mode</h3>
<p>推而广之，不仅可禁止 Chrome 进入 Dark Mode，还可让其他任意 App 不进入 Dark Mode，如果该应用支持过 Dark Mode 的话。只需要找出该应用的打包发布的 bundle id 即可。这个 id 可通过下面的命令来得到。比如查看 Canary 版本的 Chrome：</p>
<pre><code class="language-shell">$ osascript -e 'id of app &quot;Google Chrome Canary&quot;' 
com.google.Chrome.canary
</code></pre>
<p>其中 Google Chrome Canary （不区分大小写）是你在程序文件夹下看到的 .app 后缀的那个文件的文件名，比如这里 Google Chrome Canary.app。得到的 id 为 com.google.Chrome.canary 再代入最上面的命令中即可。</p>
<pre><code class="language-shell">$ defaults write com.google.Chrome.canary NSRequiresAquaSystemAppearance -bool Yes
</code></pre>
<p>这里 id 是区分大小写的，写错不生效。</p>
<p>要恢复默认时同理。</p>
<h3 id="其他默认值">其他默认值</h3>
<p>通过 <strong>defaults read</strong> 可查看到所有应用已经存在的的 defaults 值。</p>
<pre><code class="language-shell">$ defaults read &gt;&gt; defaults.txt
</code></pre>
<p>打开 defaults.txt 后搜索相应 app 的 id 可看到其所有可用值的列表。比如搜索 com.google.chrome</p>
<pre><code>{
      &quot;com.google.Chrome&quot; =     {
        KeychainReauthorizeInAppSpring2017 = 2;
        KeychainReauthorizeInAppSpring2017Success = 1;
        LastRunAppBundlePath = &quot;/Applications/Google Chrome.app&quot;;
        ...
    };
    &quot;com.google.Chrome.canary&quot; =     {
        KeychainReauthorizeInAppSpring2017 = 1;
        KeychainReauthorizeInAppSpring2017Success = 1;
        LastRunAppBundlePath = &quot;/Applications/Google Chrome Canary.app&quot;;
        ...
    };
}
</code></pre>
<p>本文转载<a href="https://www.cnblogs.com/Wayou/p/disable_mac_chrome_dark_mode.html">Wayou</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[apidoc 生成接口文档]]></title>
        <id>https://suremotoo.site/blog//post/apidoc-sheng-cheng-jie-kou-wen-dang</id>
        <link href="https://suremotoo.site/blog//post/apidoc-sheng-cheng-jie-kou-wen-dang">
        </link>
        <updated>2019-04-22T11:27:23.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="快速生成接口文档html格式-markdown格式">快速生成接口文档HTML格式、MARKDOWN格式</h2>
<h2 id="生成html格式">生成HTML格式</h2>
<h3 id="一-安装apidoc">一、安装apidoc</h3>
<p><strong><u>安装前，请确保本机已安装node</u></strong></p>
<pre><code class="language-bash">npm install apidoc -g
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="快速生成接口文档html格式-markdown格式">快速生成接口文档HTML格式、MARKDOWN格式</h2>
<h2 id="生成html格式">生成HTML格式</h2>
<h3 id="一-安装apidoc">一、安装apidoc</h3>
<p><strong><u>安装前，请确保本机已安装node</u></strong></p>
<pre><code class="language-bash">npm install apidoc -g
</code></pre>
<!--more-->
<h3 id="二-安装后创建apidoc-结构">二、安装后创建APIDOC 结构</h3>
<p>可以参考我的文件夹目录：</p>
<pre><code class="language-bash">──doc                   文件夹
├── apidoc.json         配置文件
├── gen                 生成api文档的目录
├── rules               生成文档参数文件夹
│   └── Demo.java       具体api
├── footer.md           页脚配置（可选）
├── header.md           头部配置（可选）
└── template            模板（可选）
</code></pre>
<p>先创建个文件夹命名为: <strong>doc</strong>  (名字随意) ，紧接着在文件夹中创建 <strong>apidoc.json</strong> 文件，apidoc.json 的内容可参考如下（实际使用中, 删除注释）:</p>
<p><em><strong>apidoc.json</strong></em></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;apidoc-example&quot;,
  &quot;version&quot;: &quot;0.3.0&quot;,
  &quot;description&quot;: &quot;apiDoc example project&quot;,
  &quot;title&quot;: &quot;Custom apiDoc browser title&quot;,
  &quot;url&quot;: &quot;https: {URL}/&quot;,
  &quot;header&quot;: {
    &quot;title&quot;: &quot;&quot;,//自定义头部标题
    &quot;filename&quot;: &quot;header.md&quot; // header文件
  },
  &quot;footer&quot;: {
    &quot;title&quot;: &quot;&quot;, //自定义页脚标题
    &quot;filename&quot;: &quot;footer.md&quot; // footer文件
  },
  &quot;template&quot;: {
    &quot;withGenerator&quot;: false, // 是否展示apidoc版权生成信息
    &quot;withCompare&quot;: false // 是否开启版本对比
  }
}
</code></pre>
<p>实际上，最简单的apidoc.json 文件可以只写: <strong>name、version、description</strong>就可以了，其他的都是可选配置，如下：</p>
<p><em><strong>apidoc.json（精简版）</strong></em></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;example&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;description&quot;: &quot;A basic apiDoc example&quot;
}
</code></pre>
<p>在 <strong>doc</strong> 文件夹下，创建 <strong>rules</strong> 文件夹，再在 <strong>rules</strong> 文件夹下创建 <strong>Demo.java</strong>  文件夹，demo.java 内容使用样例：</p>
<p><em><strong>Demo.java</strong></em></p>
<pre><code class="language-java">/**
 * @api {get} /user/:id Request User information
 * @apiName GetUser
 * @apiGroup User
 *
 * @apiParam {Number} id Users unique ID.
 *
 * @apiSuccess {String} firstname Firstname of the User.
 * @apiSuccess {String} lastname  Lastname of the User.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       &quot;firstname&quot;: &quot;John&quot;,
 *       &quot;lastname&quot;: &quot;Doe&quot;
 *     }
 *
 * @apiError UserNotFound The id of the User was not found.
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 404 Not Found
 *     {
 *       &quot;error&quot;: &quot;UserNotFound&quot;
 *     }
 */
public void getUser(String firstname, String lastname);
</code></pre>
<h3 id="三-生成文档">三、生成文档</h3>
<p>执行生成命令</p>
<pre><code class="language-bash">apidoc -i rules/ -o gen/
</code></pre>
<p><u><strong>命令的意思就是：将 rules 文件夹下的所有配置好的文件生成网页形式的文档, 并将文件生成到 gen 文件夹下</strong></u></p>
<p>Bingo～</p>
<hr>
<h2 id="生成markdown形式">生成markdown形式</h2>
<h3 id="一-安装apidoc-markdown">一、安装apidoc-markdown</h3>
<p><strong><u>安装前，请确保本机已安装node</u></strong></p>
<pre><code class="language-bash">npm install apidoc-markdown -g
</code></pre>
<h3 id="二-生成文档">二、生成文档</h3>
<p>执行生成命令</p>
<pre><code class="language-bash">apidoc-markdown -p gen -o gen/doc_markdown.md
</code></pre>
<p><strong><u>命令的意思就是：将 gen 文件夹下生成好的网页形式的文档, 转换成</u> doc_markdown.md 文件</strong></p>
<p>⚠️⚠️注意：要使用apidoc-markdown，先用apidoc生成网页形式文档，再进行markdown文件的生成</p>
<h2 id="apidoc-命令参数表">apidoc 命令参数表</h2>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-f --file-filters</td>
<td>指定读取文件的文件名过滤正则表达式(可指定多个)<br>例如: <code style="color: #f01414;">apidoc -f ".*\\.js$" -f ".*\\.ts$"</code> 意为只读取后缀名为js和ts的文件<br>默认值:<code style="color: #f01414;">.clj .cls .coffee .cpp .cs .dart .erl .exs?</code><br> <code style="color: #f01414;">.go .groovy .ino? .java .js .jsx .kt .litcoffee lua .p .php? .pl .pm .py .rb .scala .ts .vue</code>
</td>
</tr>
<tr>
<td style="text-align:center">-e --exclude-filters</td>
<td>指定不读取的文件名过滤正则表达式(可指定多个)<br>例如:<code style="color: #f01414;">apidoc -e ".*\\.js$"</code> 意为不读取后缀名为js的文件<br>默认:<code style="color: #f01414;">''</code>
</td>
</tr>
<tr>
<td style="text-align:center">-i, --input</td>
<td>指定读取源文件的目录<br>例如：<code style="color: #f01414;">apidoc -i myapp/</code> 意为读取<code style="color: #f01414;">myapp/</code>目录下面的源文件<br>默认值:<code style="color: #f01414;">./</code>
</td>
</tr>
<tr>
<td style="text-align:center">-o, --output</td>
<td>指定输出文档的目录<br>例如：<code style="color: #f01414;">apidoc -o doc/</code> 意为输出文档到<code style="color: #f01414;">doc</code>目录下<br>默认值:<code style="color: #f01414;">./doc/</code>
</td>
</tr>
<tr>
<td style="text-align:center">-t, --template</td>
<td>指定输出的模板文件<br>例如:<code style="color: #f01414;">apidoc -t mytemplate/</code><br>默认:<code style="color: #f01414;">path.join(__dirname, '../template/')(使用默认模板)</code>
</td>
</tr>
<tr>
<td style="text-align:center">-c, --config</td>
<td>指定包含配置文件(apidoc.json)的目录<br>例如:<code style="color: #f01414;">apidoc -c config/</code><br>默认:<code style="color: #f01414;">./</code>
</td>
</tr>
<tr>
<td style="text-align:center">-p, --private</td>
<td>输出的文档中是否包含私有api<br>例如:<code style="color: #f01414;">apidoc -p true</code> <br>默认:<code style="color: #f01414;">false</code>
</td>
</tr>
<tr>
<td style="text-align:center">-v, --verbose</td>
<td>是否输出详细的debug信息<br>例如:<code style="color: #f01414;">apidoc -v true</code><br>默认:<code style="color: #f01414;">false</code>
</td>
</tr>
<tr>
<td style="text-align:center">-h, --help</td>
<td>查看帮助文档</td>
</tr>
</tbody>
</table>
<h2 id="apidoc-markdown-命令参数表">apidoc-markdown 命令参数表</h2>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-p, --path</td>
<td>指定apidoc生成的文档目录</td>
</tr>
<tr>
<td style="text-align:center">-o, --output</td>
<td>指定输出的markdown文件路径(包含文件名)<br>例如:<code style="color: #f01414;">apidoc-markdown -o output_dir/markdown_name.md</code>
</td>
</tr>
<tr>
<td style="text-align:center">-t, --template</td>
<td>指定生成markdown文件的模板文件(EJS模板文件)<br>默认:<code style="color: #f01414;">使用工具自带的模板文件</code>
</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac将snap包发布到SnapStore]]></title>
        <id>https://suremotoo.site/blog//post/mac-jiang-snap-bao-fa-bu-dao-snapstore</id>
        <link href="https://suremotoo.site/blog//post/mac-jiang-snap-bao-fa-bu-dao-snapstore">
        </link>
        <updated>2019-04-22T11:21:36.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="macos-用snapcraft-将-snap-包发布到-snap-store">MacOS 用snapcraft 将 snap 包发布到 snap store</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="macos-用snapcraft-将-snap-包发布到-snap-store">MacOS 用snapcraft 将 snap 包发布到 snap store</h3>
<!--more-->
<h2 id="第一步-注册开发者账号">第一步 注册开发者账号</h2>
<p>首先，请在Snap Store中为您的快照 <a href="https://docs.snapcraft.io/t/registering-your-app-name/6793">注册一个名称</a> 。</p>
<h2 id="第二步安装-snapcraft">第二步安装 snapcraft</h2>
<p>如果没有安装 homebrew 的可以先去安装 homebrew。</p>
<pre><code>brew install snapcraft
</code></pre>
<p>返回终端和.snap文件的位置。您现在需要使用Snapcraft开发人员帐户凭据验证<em>snapcraft</em>命令。这可以通过以下方式完成：</p>
<pre><code>snapcraft login
</code></pre>
<p>回车会提示输入开发者账号邮箱和密码，验证通过后会提示如下图：
<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/linux/snapcraft-logion.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="snapcraft-logion-success"></p></p>
<p>接下来，上传snap包快照（这里以 <a href="https://suremotoo.site/e-tools">E-tools</a>为例）并将其释放到 <a href="https://docs.snapcraft.io/t/channels/551">稳定通道中</a> ：</p>
<pre><code>snapcraft push --release=stable E-tools_1.3.4_amd64.snap
</code></pre>
<p>回车会进行上传：
<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/linux/publish-success.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="snapcraft-logion-success"></p></p>
<p>上传成功啦！可以去<a href="https://snapcraft.io/store">Snap Store | Snapcraft</a> 网站搜索 e-tools 软件。
进入详情页面，点击 &quot;Update its listing information here&quot; 即可修改介绍信息，添加snap 图标、介绍信息、开发者网站、邮箱以及介绍图片视频等信息。</p>
<p><img src="https://github.com/Suremotoo/blog-comment/blob/master/img/linux/update-list-information.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="snapcraft-logion-success"></p></p>
<p>Bingo.🎉🎉</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 进击]]></title>
        <id>https://suremotoo.site/blog//post/redis-jin-ji</id>
        <link href="https://suremotoo.site/blog//post/redis-jin-ji">
        </link>
        <updated>2019-04-22T11:19:46.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="nosql">NoSQL</h2>
<p>not only sql；
全新数据库理念；非关系型数据库；</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="nosql">NoSQL</h2>
<p>not only sql；
全新数据库理念；非关系型数据库；</p>
<!--more-->
<h2 id="nosql-特点">NoSQL 特点</h2>
<ul>
<li>易扩展</li>
<li>灵活的数据模型</li>
<li>大数据量,高性能</li>
<li>高可用</li>
</ul>
<h2 id="nosql-数据库的四大分类">NoSQL 数据库的四大分类</h2>
<ul>
<li>键值对存储 eg: redis, 优势：查询快    劣势：数据缺少结构化</li>
<li>列存储 eg: HBase,优势：查询快    劣势：功能相对局限</li>
<li>文档数据库 eg: MongoDB, 优势：数据要求不是很严格    劣势：查询性能不是特别高，缺少统一查询语法</li>
<li>图形数据库 eg: InfoGrid, 优势：利用图结构相关算法    劣势：需要对图进行计算,不容易做分布式集群方案</li>
</ul>
<h2 id="nosql-产品">NoSQL 产品</h2>
<p>MongoDB、Redis、Riak等等</p>
<h2 id="为什么需要-redis">为什么需要 Redis ？</h2>
<ul>
<li>High Performance  高并发读写；</li>
<li>Huge Storage  海量数据的高效率存储和访问；</li>
<li>High Scalability &amp;&amp; High Availability  高可扩展性和高可用性；</li>
</ul>
<h2 id="redis-概述">Redis 概述</h2>
<p>高性能键值对数据库，支持的简直数据类型：</p>
<ul>
<li>字符串类型</li>
<li>列表类型</li>
<li>有序集合类型</li>
<li>散列类型</li>
<li>集合类型</li>
</ul>
<h2 id="redis-应用场景">Redis 应用场景</h2>
<ul>
<li>缓存</li>
<li>任务队列</li>
<li>网站访问统计</li>
<li>数据过期处理</li>
<li>应用排行榜</li>
<li>分布式集群架构中的 session 分离</li>
</ul>
<h2 id="redis-安装">Redis 安装</h2>
<h4 id="mac">Mac</h4>
<p>1、执行 <code>brew install redis</code>
2、启动 redis，可以使用后台服务启动 <code>brew services start redis</code>。或者直接启动：<code>redis-server /usr/local/etc/redis.conf</code></p>
<h2 id="启动配置">启动配置</h2>
<p>通过使用 Homebrew，可以大大降低在 Mac OS X 上设置和配置 Redis 开发环境的成本。</p>
<p><code>brew install redis</code></p>
<p>通过以上命令执行安装。</p>
<p>设置开机启动 Redis</p>
<p><code>ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents</code></p>
<p>通过 launchctl 启动 Redis 服务</p>
<p><code>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</code></p>
<p>使用配置文件启动 Redis 服务</p>
<p><code>redis-server /usr/local/etc/redis.conf</code></p>
<p>停用开机启动的 Redis</p>
<p><code>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</code></p>
<p>Redis 配置文件存放位置</p>
<p><code>/usr/local/etc/redis.conf</code></p>
<p>卸载 Redis 和依赖文件</p>
<p><code>brew uninstall redis</code></p>
<p><code>rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</code></p>
<p>获取 Redis 包信息</p>
<p><code>brew info redis</code></p>
<p>测试 Redis 服务是否正在运行</p>
<p><code>redis-cli ping</code></p>
<p>如果回复 “PONG”，表明正常运行！</p>
<h2 id="jedis">Jedis</h2>
<p>Jedis 是 Redis 官方首选的 Java 客户端开发包</p>
<p>入门使用</p>
<pre><code class="language-java">/**
 * 项目名：demo
 * 包名：com.example
 * 类名：Test
 * 描述：
 *
 * @author Suremotoo
 * @create 2018-05-10 09:08
 */
public class Test {

    @org.junit.Test
    public void test() {
        // 1.连接 redis
        Jedis jedis = new Jedis(&quot;127.0.0.1&quot;, 6379);
        // 2.存储数据
        jedis.set(&quot;name&quot;, &quot;Suremotoo&quot;);
        // 3.获取数据
        String value = jedis.get(&quot;name&quot;);
        // 4.控制台打印测试结果
        System.out.println(&quot;value = &quot; + value);
        // 5.关闭连接
        jedis.close();
    }

}
</code></pre>
<p><strong>如果是连接的 Redis 在 Linux 服务器上，需要设置防火墙</strong></p>
<pre><code>vim /etc/sysconfig/iptables
# 添加一行
-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT
</code></pre>
<p>:wq 保存退出, <strong>最后重启 linux 服务器防火墙</strong></p>
<p><code>service iptables restart</code></p>
<h2 id="jedis-与-jdbc-很类似也有连接池">Jedis 与 JDBC 很类似，也有连接池</h2>
<pre><code class="language-java">    /**
     * 连接池方式连接
     */
    @org.junit.Test
    public void poolTest() {
        // 获得连接池的配置对象
        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
        // 设置最大连接数
        jedisPoolConfig.setMaxTotal(30);
        // 设置最大空闲连接数
        jedisPoolConfig.setMaxIdle(10);

        // 获得Jedis 连接池
        JedisPool jedisPool = new JedisPool(jedisPoolConfig, &quot;127.0.0.1&quot;, 6379);

        // Jedis 对象
        Jedis jedis = null;

        try {
            // 通过连接池获得连接
            jedis = jedisPool.getResource();
            // 设置数据
            jedis.set(&quot;name&quot;, &quot;Suremotoo&quot;);
            // 获取数据
            String value = jedis.get(&quot;name&quot;);
            System.out.println(&quot;value = &quot; + value);
            if (value != null &amp;&amp; &quot;&quot;.equals(value)) {
                jedis.del(&quot;name&quot;);
            } else {
                System.out.println(&quot; 空 &quot;);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (jedis != null) {
                jedis.close();
            }

            if (jedisPool != null) {
                jedisPool.close();
            }
        }
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Macos 破解软件下载]]></title>
        <id>https://suremotoo.site/blog//post/macos-po-jie-ruan-jian-xia-zai</id>
        <link href="https://suremotoo.site/blog//post/macos-po-jie-ruan-jian-xia-zai">
        </link>
        <updated>2019-04-21T13:58:53.000Z</updated>
        <summary type="html"><![CDATA[<h2 id=""></h2>
<p>本教程是分享一个，下载 MacOS 系统破解的APP软件资源。提供 mac 破解软件的网站不少，但是很多都有下载需要会员、积分或者充值的限制，我这里发现个可以免费下载的网站，而且还不需要注册哟。</p>
<p><em>本文章仅供学习参考</em></p>
]]></summary>
        <content type="html"><![CDATA[<h2 id=""></h2>
<p>本教程是分享一个，下载 MacOS 系统破解的APP软件资源。提供 mac 破解软件的网站不少，但是很多都有下载需要会员、积分或者充值的限制，我这里发现个可以免费下载的网站，而且还不需要注册哟。</p>
<p><em>本文章仅供学习参考</em></p>
<!--more-->
<h3 id="一-下载软件网址">一、 下载软件网址</h3>
<p><strong><a href="https://cmacapps.com/">https://cmacapps.com/</a></strong>，就是这个网址。</p>
<h3 id="二-下载技巧">二、下载技巧</h3>
<p>由于该网站会有多个广告，为了让大家不误下软件，我这边分享个技巧：</p>
<ol>
<li>
<p>首次进入网站后，点击网站任何一个空白处，如果有弹出新的网页窗口，新弹出的窗口基本就是广告；第二次点击就不会有广告了，如果你点击了下一页，那么第一次点击还是广告，第二次就没有广告了。</p>
</li>
<li>
<p>在搜索框中输入软件的关键字后，要多等待会，网站会加载相关的结果，如图：<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/cmacapps_result.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="搜索展示图"></p>
我们就以cleanMyMac为例，点击后进入下载页。</p>
</li>
<li>
<p>进入软件的下载介绍页面后，往下滚动，找到如下图的按钮：<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/cmacapps_appsinfo.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="下载按钮展示图"></p>
两个按钮我们可以点击一个就行，会打开一个新窗口，新窗口页面如果是类似如下图，就正确了。
<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/cmacapps_btn_down.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="下载按钮展示图2"></p></p>
</li>
<li>
<p>具体下载按钮，我们再点击灰色downloadNow，如图：<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/cmacapps_btn_download.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="下载按钮展示图3"></p>
如果点击打开新窗口，新窗口基本是广告，可以关掉，继续点灰色downloadNow按钮，<strong>点击后，不再弹出新窗口，当前页面变化了，就是正确了。</strong> 此时页面会有类似下图的Google机器人验证:<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/google_check.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="谷歌机器人验证"></p>
点击后如果出现✅就是验证成功啦，验证成功如下图：<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/google_check_success.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="谷歌机器人验证"></p>
如果下载过多，可能会出现点击图片的验证，基本都是很简单的，到时候如果看不懂，就赶紧翻译吧！ :)
<em><span style="color:red;"> 注意：谷歌机器人验证需要翻墙，这里其实用谷歌访问助手插件就行。</span></em></p>
</li>
<li>
<p>基本上验证成功点击 continue 按钮就开始真正的下载了，也就结束了。如果对于下载的大文件，我可以再推荐个软件，使用<a href="https://github.com/yangshun1029/aria2gui/releases/" target="_blank">Aria2GUI</a>，在下载的时候可以复制下载链接，如图：<img src="https://github.com/Suremotoo/blog-comment/blob/master/img/cmacapps/cmacapps_download_url.png?raw=true" style="display: block; max-width: 100%;height: auto;" alt="复制下载链接"></p>
然后再使用aria2GUI下载，速度快到你惊喜。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github SSH 配置]]></title>
        <id>https://suremotoo.site/blog//post/github-ssh-config</id>
        <link href="https://suremotoo.site/blog//post/github-ssh-config">
        </link>
        <updated>2019-04-21T13:57:34.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="第一步-检查密钥">第一步-检查密钥</h2>
<h4 id="查看是否有-id_dsa-id_dsapub-文件">查看是否有 id_dsa、id_dsa.pub 文件</h4>
]]></summary>
        <content type="html"><![CDATA[<h2 id="第一步-检查密钥">第一步-检查密钥</h2>
<h4 id="查看是否有-id_dsa-id_dsapub-文件">查看是否有 id_dsa、id_dsa.pub 文件</h4>
<!--more-->
<pre><code class="language-shell">$ cd ~/.ssh
$ ls
authorized_keys   known_hosts   id_rsa    id_rsa.pub 
</code></pre>
<p><em><strong>看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</strong></em></p>
<h4 id="假如没有这些文件或者没有-ssh-目录可以用-ssh-keygen-来创建-该程序在-linuxmac-系统上由-ssh-包提供而在-windows-上则包含在-msysgit-包里">假如没有这些文件，或者没有 .ssh 目录，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</h4>
<!--more-->
<pre><code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;

Creates a new ssh key using the provided email # Generating public/private rsa key pair.

Enter file in which to save the key (/home/you/.ssh/id_rsa):
</code></pre>
<h4 id="直接按enter就行-然后会提示你输入密码如下如果很注重安全嘛建议输一个如果是私人电脑建议不输入不然你每次pull-push都要输入密码">直接按Enter就行。然后，会提示你输入密码，如下(如果很注重安全嘛，建议输一个；如果是私人电脑，建议不输入，不然你每次pull、push都要输入密码)：</h4>
<pre><code>Enter same passphrase again: [Type passphrase again]
</code></pre>
<h4 id="完了之后大概如下">完了之后，大概如下：</h4>
<pre><code>Your public key has been saved in 路径省略/.ssh/id_rsa.pub.
The key fingerprint is  此处省略......
</code></pre>
<h3 id="第二步-在github上配置公钥">第二步-在GitHub上配置公钥</h3>
<h4 id="查看公钥">查看公钥</h4>
<pre><code class="language-shell">$ cat ~/.ssh/id_rsa.pub

ssh-rsa *******省略
</code></pre>
<h4 id="登陆你的github帐户-点击你的头像然后-settings-左栏点击-ssh-and-gpg-keys-点击-new-ssh-key-复制公钥内容粘贴进key文本域内-title域自己随便起个名字就行最后点击-add-key">登陆你的github帐户。点击你的头像，然后 <strong>Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</strong>  ，复制公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字就行，最后点击 Add key</h4>
<h3 id="第三部-验证">第三部-验证</h3>
<pre><code>$ ssh -T git@github.com

Attempts to ssh to github
</code></pre>
<h4 id="如果有如下提示就是成功啦">如果有如下提示就是成功啦</h4>
<pre><code>Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access.
</code></pre>
]]></content>
    </entry>
</feed>